"use srtict";
const obj = {//объект
    name:"Egor",
    age: 20, 
    isMarried: false
};
console.log(obj.name);//console.log(obj['name']);

let arr = ['plum.png','orange.jpg', 7, 'Egor'];
console.log(arr[1]);



--------------------------------------------------------------

//обращение к пользователю самое простое

"use srtict";
// alert("Hello");
// const result = confirm("Are you here?");
// console.log(result);
const answer = prompt("Вам есть 18?","18");//тут строка
//const answer = prompt("Вам есть 18?","18");//тут число
console.log(typeof(answer));
const answers=[];
//answers[0]=prompt('Как ваше имя?','');
//answers[1]=prompt('Как ваше фамилия?','');
//answers[2]=prompt('Сколько вам лет?','');

console.log(typeof(answers));
//всё это корректно работает только внутри браузера, не всё будет корректно работать в данной консоли




------------------------------------------------------------------


//интерполяция и сложный вывод

"use srtict";

const category = 'toys';

console.log('https://someurl.com/');
//интерполяция:
console.log(`https://someurl.com/${category}/5`);

const user = 'Egor';
 alert(`Hi, ${user}`);





------------------------------------------------------------------

//операторы

"use srtict";
// operators
//console.log("arr" + " - object");
//console.log(4 + " - object");
//console.log(4 + +"5");//получаем число (унарный плюс)


//инкремент и декремент
let incr=10, decr=10;
// ++incr;
// --decr;
console.log(incr++);//10
console.log(decr--);//10



-------------------------------------------------------------------



//тернарный оператор в js
const num =50;
(num===50)?правильный ответ:неправильный ответ;

//continue в условии в цикле пропускает действие в цикле и идёт на следующий шаг




-----------------------------------------------------------------------


//функции

"use srtict";

function showfirstMessage(text){//создаётся сразу
    console.log(text);
    
}

showfirstMessage("hi");

const logger = function() {//создаётся по ходу кода
    console.log("hello");
};

logger();

const calc = (a,b)=>{ return a+b};//Стрелочная функция




--------------------------------------------------------------------------------


//строки

let fruit ="Some Fruit";
console.log(fruit.indexOf("ui"));//поиск подстроки
const logg = "hello world";
console.log(logg.slice(6, logg.length));//Отрезать часть строки,от и до, отрицательные чиал пойдут с конца
console.log(logg.substring(6, logg.length));//аналогично верхней без отрицательных
console.log(logg.substr(6,5));//отрезать часть строки от какого-то элемента и сколько нужно отвезать

const num =12.2;
console.log(Math.round(num));

const test = "12.2px";
console.log(parseFloat(test));//отделение от слов




------------------------------------------------------------------------------



//callback функции
function first(){
    //Do something
    setTimeout(function(){
        console.log(1);
    },500);
}

function second(){
    console.log(2);
}

first();
second();

function learnJS(lang, callback){
    console.log(`Я учу: ${lang}`)
    callback();
}
function done(){
    console.log("Я прошёл этот урок");
}
learnJS("JavaScript", done);//выведется сначала я учу джаваскрипт, потом я прошёл этот урок



--------------------------------------------------------------------

//объекты

const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: { //объект внутри объекта
        border: 'black',
        background: 'red'
    },
    makeTest: function(){//метод объекта
        console.log("Test");
    }
};
options.makeTest();
// delete options.name;

const {border, background} = options.colors;//деструктуризация
console.log(border);//black




//перебор сложный и ненужный
// let counter =0;
// for (let key in options) { //перебор
//     if (typeof (options[key]) == 'object') {
//         for (let i in options[key]) {
//             console.log(`Свойство ${i} имеет значение ${options[key][i]}`);
//             counter++;
//         }
//     } else {
//         console.log(`Свойство ${key} имеет значение ${options[key]}`);
//         counter++;
//     }
// }
// console.log(counter);


//перебор простой
console.log(Object.keys(options).length);





---------------------------------------------------------------



"use srtict";
//массивы и псевдомассивы

const arr =[1,2,3,4,5];
arr.sort(compareNum);//используется быстрая сортировка
function compareNum(a,b){//для сортировки
    return a-b;
}

arr.pop();//delete element from the end
arr.push(7);//добавление в конце

for(let value of arr){
    console.log(value);
}
arr[99] = 0;//с такой штукой покажется длина равная 100, если вывести массив то там будут пустые элементы
arr.forEach(function(item, i, arr){//применяет фукнцию для каждого элемента
    console.log(`${i}: ${item} внутри массива ${arr}`)
});

const str = prompt("","");
const products = str.split(", ");//Формируется массив из введенных элементов
console.log(products);
products.sort();//сортирует как строки
console.log(products.join("; "));//на освновании массива делаем строку


//псевдомассивы


---------------------------------------------------------------


//передача по ссылке или по значению
let a=5, b=a;
b+=5;

console.log(b);
console.log(a);

const obj ={
    a: 5,
    b: 1
};

const copy = obj;//не можем так делать потому что получаем не значения а ссылки на значение элементов

copy.a = 10;
console.log(copy);
console.log(obj);

function copyy(mainObj){
    let objCopy = {};
    let key;
    for(key in mainObj){
        objCopy[key]=mainObj[key];
    }

    return objCopy;
}

const numbers = {
    aa: 2,
    bb: 5,
    c: {
        x:7,
        y: 4
    }
};

const newNumbers = copyy(numbers);//клонирование объекта(поверхностная копия)
newNumbers.aa=10;
newNumbers.c.x = 10;
console.log(newNumbers);
console.log(numbers);


const add = {
    d: 17,
    e: 20
};
const clone =Object.assign({}, add);//копирование, в пустой вставляем какой-то объект 
clone.d=20;

console.log(add);
console.log(clone);


//создаём копию массива
const oldArray = ["a", "b", "c"];
const newArray=oldArray.slice();//копирует старый массив

//оператор разворота
const video = ["youtube", "vimeo","rutube"], blogs = ["wordpress", "livejournal", "blogger"];
const internet = [...video, ...blogs, "vk"];
console.log(internet);

function log(a,b,c){
    console.log(a);
    console.log(b);
    console.log(c);
}
const num = [1,5,6];

log(...num);

const arrrr = ["a", "b"];

const newArrrrr = [...arrrr];

const q={
    one: 1,
    two: 2
};

const newObj = {...q};



-------------------------------------------------------



//основы ооп
let str = "some";
let strObj = new String(str);

console.log(typeof(str));//stroka
console.log(typeof(strObj));//object

//console.dir([1,2,3]);


const soldier = {
    health: 400,
    armor: 400,
    sayHello: function(){
        console.log("Hello");
    }
};
const john = Object.create(soldier);//включает в себя солдата
// const john = {
//     health: 100
// };

//john.__proto__=soldier;//нельзя использовать
Object.setPrototypeOf(john, soldier);//идентично строке выше
console.log(john.armor);
john.sayHello();
